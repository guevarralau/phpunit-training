<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\User;
use App\Article;
use App\Comment;

class UpdateCommentsTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->signIn();
    }

    /** @test */
    public function comment_can_only_be_updated_by_comment_author_or_article_author()
    {
        $comment = create(Comment::class, [
            'user_id' => $commentAuthor = create(User::class)->id ,
            'article_id' => $article = create(Article::class, [
                'user_id' => $articleAuthor = create(User::class)->id,
            ])->id,
        ]);
        $this->patch(
            route('comments.update', ['comment' => $comment->id]),
            ['content' => 'new comment']
        )->assertForbidden();
    }

    /** @test */
    public function comment_author_can_update_comment()
    {
        $article = create(Article::class, [
            'user_id' => auth()->id(),
        ]);
        $comment = new Comment;
        $comment->fill([
            'content' => 'this post should be allowed',
            'user_id' => auth()->id(),
            'article_id' => $article->id
        ]);
        $comment->save();
        $this->patch(
            route('comments.update', ['comment' => $comment->id]),
            ['content' => 'new content']
        );
        tap($comment->fresh(), function ($comment){
           $this->assertEquals('new content', $comment->content);
        });
    }
    /** @test */
    public function article_author_can_update_comments_from_his_article()
    {
        $comment = new Comment;
        $comment->fill([
            'content' => 'this post should be allowed',
            'user_id' => $user = create(User::class)->id,
            'article_id' =>$article = create(Article::class, [
                'user_id' => auth()->id(),
            ])->id
        ]);
        $comment->save();
        $this->patch(
            route('comments.update', ['comment' => $comment->id]),
            ['content' => 'new content']
        );
        tap($comment->fresh(), function($comment){
            $this->assertEquals('new content' , $comment->content);
        });
    }
    /** @test */
        public function content_is_required_in_update()
    {
        $this->post(
            route('comments.store', [
                'article' => create(Article::class,
                    [
                        'user_id' => auth()->id()
                    ]
                )->id
            ]), [] // passed empty array
        )->assertSessionHasErrors('content');
    }
}
